#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative 'run.rb'

require 'tempfile'

def main(source, revision)
  root = capture!(%w[git rev-parse --show-toplevel]).chomp

  Dir.mktmpdir do |dir|
    Dir.chdir(dir) do
      clone(source, revision)
      modify(source, revision)
      copy(root)
    end
  end
end

def clone(source, revision)
  run!(%W[git clone --quiet --depth=1 -b #{revision} https://#{source}.git .])
end

def modify(source, revision)
  Dir['*.proto'].each do |proto|
    tmp = proto + '.bak'
    run2!(%W[sed s/gitlab-org\\/gitaly-proto/gitlab-org\\/gitaly\\/proto/ #{proto}], out: tmp)
    FileUtils.mv(tmp, proto)
  end

  FileUtils.mv('README.md', 'README.orig.md')

  commit_id = capture!(%w[git rev-parse HEAD]).chomp
  readme = <<EOS
# Vendored copy of gitaly-proto

Vendored from #{source} at #{commit_id}.

Migration in progress, see
https://gitlab.com/gitlab-org/gitaly/issues/1761. Do not edit files in
this directory, your changes will be ignored and overwritten.
EOS
  File.open('README.md', 'w') { |f| f.write(readme) }

  File.open('REVISION', 'w') { |f| f.write(revision) }
  File.open('SOURCE', 'w') { |f| f.write(source) }
end

def copy(root)
  dest = File.join(root, 'proto')
  FileUtils.rm(Dir["#{dest}/*.proto"])
  file_list = Dir['*.proto'] + Dir['*.md'] + %w[VERSION REVISION SOURCE]
  FileUtils.cp(file_list, dest)
end

unless ARGV.count == 2
  abort "Usage: #{$0} SOURCE REVISION"
end

main(*ARGV)
