/*
This file is a mock gRPC service used for validating the various types of
gRPC methods that Praefect is expected to reverse proxy. It is intended to keep
tests simple and keep Praefect decoupled from specific gRPC services.
*/
syntax = "proto3";

package mock;

import "shared.proto";
import "google/protobuf/empty.proto";

message SimpleRequest {
	int32 value = 1;
}

message SimpleResponse {
	int32 value = 2;
}

message RepoRequest {
	gitaly.Repository repo = 1;
}

service SimpleService {
  // ServerAccessor is a unary RPC that accesses a server
  rpc ServerAccessor(SimpleRequest) returns (SimpleResponse) {
    option (gitaly.op_type) = {
      op: ACCESSOR
      scope_level: SERVER
    };
  }
	
  // RepoAccessorUnary is a unary RPC that accesses a repo
  rpc RepoAccessorUnary(RepoRequest) returns (google.protobuf.Empty) {
    option (gitaly.op_type) = {
      op: ACCESSOR
      scope_level: REPOSITORY
      target_repository_field: "1"
    };
  }
	
  // RepoMutatorUnary is a unary RPC that mutates a repo
  rpc RepoMutatorUnary(RepoRequest) returns (google.protobuf.Empty) {
    option (gitaly.op_type) = {
      op: MUTATOR
      scope_level: REPOSITORY
      target_repository_field: "1"
    };
  }
}
