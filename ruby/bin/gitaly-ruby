#!/usr/bin/env ruby

require 'fileutils'

require 'grpc'

require_relative '../lib/gitaly_server.rb'
require_relative '../lib/gitaly_server/sentry_interceptor.rb'
require_relative '../lib/gitaly_server/exception_sanitizer_interceptor.rb'

SHUTDOWN_TIMEOUT = 600

def main
  if ARGV.length != 2
    abort "Usage: #{$0} PPID /path/to/socket"
  end
  ppid, socket_path = ARGV

  ppid_i = ppid.to_i
  abort "invalid PPID: #{ppid.inspect}" unless ppid_i > 0

  FileUtils.rm_f(socket_path)
  socket_dir = File.dirname(socket_path)
  FileUtils.mkdir_p(socket_dir)
  File.chmod(0700, socket_dir)

  s = GRPC::RpcServer.new(
    poll_period: SHUTDOWN_TIMEOUT,
    interceptors: [
      GitalyServer::SentryInterceptor.new,
      GitalyServer::ExceptionSanitizerInterceptor.new
    ]
  )
  port = 'unix:' + socket_path
  s.add_http2_port(port, :this_port_is_insecure)
  GRPC.logger.info("... running insecurely on #{port}")

  GitalyServer.register_handlers(s)

  signal_thread = Thread.new do
    sleep
  end

  trap('TERM') { signal_thread.kill }
  start_parent_watcher(ppid_i, signal_thread)
  start_gc_thread

  run_thread = Thread.new do
    s.run
    signal_thread.kill
  end

  signal_thread.join
  s.stop
  run_thread.join
end

def start_parent_watcher(original_ppid, signal_thread)
  Thread.new do
    loop do
      if Process.ppid != original_ppid
        # Our original parent is gone. Self-terminate.
        signal_thread.kill
        break
      end

      sleep 1
    end
  end
end

def start_gc_thread
  Thread.new do
    loop do
      GC.start
      sleep 60
    end
  end
end

main
