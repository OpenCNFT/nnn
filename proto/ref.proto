syntax = "proto3";

package gitaly;

import "errors.proto";
import "lint.proto";
import "shared.proto";

option go_package = "gitlab.com/gitlab-org/gitaly/v16/proto/go/gitalypb";

// RefService is a service that provides RPCs to list and modify Git references.
service RefService {

  // FindDefaultBranchName looks up the default branch reference name. Unless
  // otherwise specified the following heuristic is used:
  //
  // 1. If there are no branches, return an empty string.
  // 2. If there is only one branch, return the only branch.
  // 3. If a branch exists that matches HEAD, return the HEAD reference name.
  // 4. If a branch exists named refs/heads/main, return refs/heads/main.
  // 5. If a branch exists named refs/heads/master, return refs/heads/master.
  // 6. Return the first branch (as per default ordering by git).
  rpc FindDefaultBranchName(FindDefaultBranchNameRequest) returns (FindDefaultBranchNameResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // Return a stream so we can divide the response in chunks of branches
  rpc FindLocalBranches(FindLocalBranchesRequest) returns (stream FindLocalBranchesResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // FindAllBranches ...
  rpc FindAllBranches(FindAllBranchesRequest) returns (stream FindAllBranchesResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // Returns a stream of tags repository has.
  rpc FindAllTags(FindAllTagsRequest) returns (stream FindAllTagsResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // FindTag looks up a tag by its name and returns it to the caller if it exists. This RPC supports
  // both lightweight and annotated tags. Note: this RPC returns an `Internal` error if the tag was
  // not found.
  rpc FindTag(FindTagRequest) returns (FindTagResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // FindAllRemoteBranches ...
  rpc FindAllRemoteBranches(FindAllRemoteBranchesRequest) returns (stream FindAllRemoteBranchesResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // RefExists ...
  rpc RefExists(RefExistsRequest) returns (RefExistsResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // FindBranch finds a branch by its unqualified name (like "master") and
  // returns the commit it currently points to.
  rpc FindBranch(FindBranchRequest) returns (FindBranchResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // UpdateReferences atomically updates a set of references to a new state. This RPC allows creating
  // new references, deleting old references and updating existing references in a raceless way.
  //
  // Updating symbolic references with this RPC is not allowed.
  rpc UpdateReferences(stream UpdateReferencesRequest) returns (UpdateReferencesResponse) {
    option (op_type) = {
      op: MUTATOR
    };
  }

  // DeleteRefs ...
  rpc DeleteRefs(DeleteRefsRequest) returns (DeleteRefsResponse) {
    option (op_type) = {
      op: MUTATOR
    };
  }

  // ListBranchNamesContainingCommit ...
  rpc ListBranchNamesContainingCommit(ListBranchNamesContainingCommitRequest) returns (stream ListBranchNamesContainingCommitResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // ListTagNamesContainingCommit ...
  rpc ListTagNamesContainingCommit(ListTagNamesContainingCommitRequest) returns (stream ListTagNamesContainingCommitResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // GetTagSignatures returns signatures for annotated tags resolved from a set of revisions. Revisions
  // which don't resolve to an annotated tag are silently discarded. Revisions which cannot be resolved
  // result in an error. Tags which are annotated but not signed will return a TagSignature response
  // which has no signature, but its unsigned contents will still be returned.
  rpc GetTagSignatures(GetTagSignaturesRequest) returns (stream GetTagSignaturesResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // GetTagMessages ...
  rpc GetTagMessages(GetTagMessagesRequest) returns (stream GetTagMessagesResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // ListRefs returns a stream of all references in the repository. By default, pseudo-revisions like HEAD
  // will not be returned by this RPC. Any symbolic references will be resolved to the object ID it is
  // pointing at.
  rpc ListRefs(ListRefsRequest) returns (stream ListRefsResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

  // FindRefsByOID returns an array of fully qualified reference names that point to an object ID.
  // It returns nothing if the object ID doesn't exist, or doesn't point to
  // any branches or tags. Prefixes can be also be used as the object ID.
  rpc FindRefsByOID(FindRefsByOIDRequest) returns (FindRefsByOIDResponse) {
    option (op_type) = {
      op: ACCESSOR
    };
  }

}

// FindDefaultBranchNameRequest is the request for the FindDefaultBranchName RPC.
message FindDefaultBranchNameRequest {
  // Repository is the repository to find the default branch from.
  Repository repository = 1 [(target_repository)=true];
  // HeadOnly when true will determine the default branch using HEAD only
  // instead of using the heuristic. The returned reference may not exist.
  bool head_only = 2;
}

// FindDefaultBranchNameRequest is the response for the FindDefaultBranchName RPC.
message FindDefaultBranchNameResponse {
  // Name is the fully qualified default branch name.
  bytes name = 1;
}

// FindLocalBranchesRequest ...
message FindLocalBranchesRequest {
  // SortBy ...
  enum SortBy {
    // NAME ...
    NAME = 0; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
    // UPDATED_ASC ...
    UPDATED_ASC = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    // UPDATED_DESC ...
    UPDATED_DESC = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  }

  // repository ...
  Repository repository = 1 [(target_repository)=true];
  // sort_by ...
  SortBy sort_by = 2;
  // The page token is the branch name, with the `refs/heads/` prefix, for
  // example "refs/heads/master". After the first branch name is encountered
  // which lexicographically exceeds the page token, it will be the first result
  // send as part of the response.
  PaginationParameter pagination_params = 3;
}

// FindLocalBranchesResponse ...
message FindLocalBranchesResponse {
  // The field Branches has been removed in favor of LocalBranches.
  // Issue: https://gitlab.com/gitlab-org/gitaly/-/issues/1294
  reserved "branches";
  reserved 1;
  // local_branches ...
  repeated Branch local_branches = 2;
}

// FindAllBranchesRequest ...
message FindAllBranchesRequest {
  // repository ...
  Repository repository = 1 [(target_repository)=true];
  // Only return branches that are merged into root ref
  bool merged_only = 2;
  // If merged_only is true, this is a list of branches from which we
  // return those merged into the root ref
  repeated bytes merged_branches = 3;
}

// FindAllBranchesResponse ...
message FindAllBranchesResponse {
  // Branch ...
  message Branch {
    // name ...
    bytes name = 1;
    // target ...
    GitCommit target = 2;
  }

  // branches ...
  repeated Branch branches = 1;
}

// FindTagRequest is a request for the FindTag RPC.
message FindTagRequest {
  // Repository is the repository to look up the tag in.
  Repository repository = 1 [(target_repository)=true];
  // TagName is the name of the tag that should be looked up. The caller is supposed to pass in the
  // tag name only, so if e.g. a tag `refs/tags/v1.0.0` exists, then the caller should pass `v1.0.0`
  // as argument.
  bytes tag_name = 2;
}

// FindTagResponse is a response for the FindTag RPC.
message FindTagResponse {
  // Tag is the tag that was found.
  Tag tag = 1;
}

// FindTagError is an error that will be returned by the FindTag RPC under specific error
// conditions.
message FindTagError {
  oneof error {
    // TagNotFound indicates that the tag was not found.
    ReferenceNotFoundError tag_not_found = 1;
  }
}

// FindAllTagsRequest ...
message FindAllTagsRequest {
  // SortBy allows to specify desired order of the elements.
  message SortBy {
    // Key is a key used for sorting.
    enum Key {
      //  ...
      REFNAME     = 0; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
      // CREATORDATE ...
      CREATORDATE = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
      // VERSION_REFNAME sorts tags by their semantic versions (https://semver.org/).
      // Tag names that are not semantic versions are sorted lexicographically. They come before
      // the semantic versions if the direction is ascending and after the semantic versions if
      // the direction is descending.
      VERSION_REFNAME = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    }

    //  ...
    Key           key       = 1;
    // direction ...
    SortDirection direction = 2;
  }

  // repository ...
  Repository repository = 1 [(target_repository)=true];
  // SortBy allows to request tags in particular order.
  SortBy sort_by = 2;
  // The page token is the tags name, with the `refs/tags/` prefix, for
  // example "refs/tags/v1.0.0". When the tag name matches the page token,
  // the tag following it will be the first result send as part of the response.
  PaginationParameter pagination_params = 3;
}

// FindAllTagsResponse ...
message FindAllTagsResponse {
  // tags ...
  repeated Tag tags = 1;
}

// RefExistsRequest ...
message RefExistsRequest {
  // repository ...
  Repository repository = 1 [(target_repository)=true];
  // Any ref, e.g. 'refs/heads/master' or 'refs/tags/v1.0.1'. Must start with 'refs/'.
  bytes ref = 2;
}

// RefExistsResponse ...
message RefExistsResponse {
  // value ...
  bool value = 1;
}

// CreateBranchRequest ...
message CreateBranchRequest {
  // repository ...
  Repository repository = 1 [(target_repository)=true];
  // name ...
  bytes name = 2;
  // start_point ...
  bytes start_point = 3;
}

// CreateBranchResponse ...
message CreateBranchResponse {
  // Status ...
  enum Status {
    // OK ...
    OK = 0; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
    // ERR_EXISTS ...
    ERR_EXISTS = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    // ERR_INVALID ...
    ERR_INVALID = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    // ERR_INVALID_START_POINT ...
    ERR_INVALID_START_POINT = 3; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  }

  // status ...
  Status status = 1;
  // branch ...
  Branch branch = 2;
}

// DeleteBranchRequest ...
message DeleteBranchRequest {
  // repository ...
  Repository repository = 1 [(target_repository)=true];
  // name ...
  bytes name = 2;
}

// Not clear if we need to do status signaling; we can add fields later.
message DeleteBranchResponse {
}

// FindBranchRequest ...
message FindBranchRequest {
  // repository is the repository in which the branch should be looked up.
  Repository repository = 1 [(target_repository)=true];
  // name is the name of the branch which should be looked up. This must be the
  // branch name only, it must not have the "refs/heads/" prefix.
  bytes name = 2;
}

// FindBranchResponse ...
message FindBranchResponse {
  // branch ...
  Branch branch = 1;
}

// UpdateReferencesRequest is a request for the UpdateReferences RPC.
message UpdateReferencesRequest {
  // Update represents a reference update.
  message Update {
    // Reference is the fully-qualified reference name that should be updated.
    bytes reference = 1;

    // OldObjectId is the object ID the reference should be pointing to in order to be updated.
    // This has the intent to avoid time-of-check-time-of-use-style races when the object ID
    // has changed.
    //
    // If empty, the reference will be force-updated without any such checks. If set to the
    // all-zeroes object ID, this will verify that the branch did not exist previously.
    bytes old_object_id = 2;

    // NewObjectId is the object ID the reference should be updated to. If set to the all-zeroes
    // object ID the branch will be deleted.
    bytes new_object_id = 3;
  };

  // Repository is the repository where references shall be updated in.
  Repository repository = 1 [(target_repository)=true];
  // Updates is the set of reference updates that shall be performed.
  repeated Update updates = 2;
}

// UpdateReferencesResponse is a response for the UpdateReferences RPC.
message UpdateReferencesResponse {
}

// UpdateReferencesError is returned when UpdateReferences fails to update references in some specific well-defined
// cases.
message UpdateReferencesError {
  oneof error {
    // InvalidFormat is returned when one or more of the refs to be deleted
    // have an invalid format.
    InvalidRefFormatError invalid_format = 1;
    // ReferencesLocked is returned when the references to be deleted are already
    // locked by another process.
    ReferencesLockedError references_locked = 2;
    // ReferenceStateMismatch is return for unforced reference updates when the expected object ID does not match
    // the actual object ID of the reference. This indicates either mismatching expectations or a race with another
    // client that has updated the reference concurrently.
    ReferenceStateMismatchError reference_state_mismatch = 3;
  }
}

// DeleteRefsRequest ...
message DeleteRefsRequest{
  // repository ...
  Repository repository = 1 [(target_repository)=true];
  // The following two fields are mutually exclusive
  repeated bytes except_with_prefix = 2; // protolint:disable:this REPEATED_FIELD_NAMES_PLURALIZED
  // refs ...
  repeated bytes refs = 3;
}

// DeleteRefsResponse ...
message DeleteRefsResponse {
  // git_error ...
  string git_error = 1;
}

// DeleteRefsError is returned when DeleteRefs fails to delete refs
message DeleteRefsError {
  oneof error {
    // InvalidFormat is returned when one or more of the refs to be deleted
    // have an invalid format.
    InvalidRefFormatError invalid_format = 1;
    // ReferencesLocked is returned when the references to be deleted are already
    // locked by another process.
    ReferencesLockedError references_locked = 2;
  }
}

// ListBranchNamesContainingCommitRequest ...
message ListBranchNamesContainingCommitRequest {
  // repository ...
  Repository repository = 1 [(target_repository)=true];
  // commit_id ...
  string commit_id = 2;
  // Limit the number of tag names to be returned
  // If the limit is set to zero, all items will be returned
  uint32 limit = 3;
}

// ListBranchNamesContainingCommitResponse ...
message ListBranchNamesContainingCommitResponse {
  reserved 1;
  // branch_names ...
  repeated bytes branch_names = 2;
}

// ListTagNamesContainingCommitRequest ...
message ListTagNamesContainingCommitRequest {
  // repository ...
  Repository repository = 1 [(target_repository)=true];
  // commit_id ...
  string commit_id = 2;
  // Limit the number of tag names to be returned
  // If the limit is set to zero, all items will be returned
  uint32 limit = 3;
}

// ListTagNamesContainingCommitResponse ...
message ListTagNamesContainingCommitResponse {
  reserved 1;
  // tag_names ...
  repeated bytes tag_names = 2;
}

// GetTagSignaturesRequest is a request for the GetTagSignatures RPC.
message GetTagSignaturesRequest {
  // Repository is the repository in which tag signatures should be looked up.
  Repository repository = 1 [(target_repository)=true];
  // TagRevisions is the set of revisions which that should be looked up. Revisions
  // supports the syntax as specified by gitrevisions(7). All revisions are expected
  // to resolve to annotated tag objects. At least one revision must be provided.
  repeated string tag_revisions = 2;
}

// GetTagSignaturesResponse is a response for a GetTagSignatures request. Each response
// may contain multiple TagSignatures. In case TagSignatures don't fit into a single
// response, signatures will be batched in multiple responses.
message GetTagSignaturesResponse {
  // TagSignature represents the signature of a signed tag.
  message TagSignature {
    // TagId is the resolved object ID of the tag.
    string tag_id = 1;
    // Signature contains the cryptographic signature of the tag. If the tag is not
    // cryptographically signed, then the signature is unset.
    bytes signature = 2;
    // Content contains the contents which are signed by the signature. Contents
    // include both the commit message, but also the commit metadata like author and
    // subject.
    bytes content = 3;
  }

  // Signatures is the set of signatures found.
  repeated TagSignature signatures = 1;
}

// GetTagMessagesRequest ...
message GetTagMessagesRequest {
  reserved 2;
  reserved "tag_names";

  // repository ...
  Repository repository = 1 [(target_repository)=true];
  // tag_ids ...
  repeated string tag_ids = 3;
}

// GetTagMessagesResponse ...
message GetTagMessagesResponse {
  reserved 1;
  reserved "tag_name";

  // message ...
  bytes message = 2;
  // Only present for a new tag message
  string tag_id = 3;
}

// FindAllRemoteBranchesRequest ...
message FindAllRemoteBranchesRequest {
  // repository ...
  Repository repository = 1 [(target_repository)=true];
  // remote_name ...
  string remote_name = 2;
}

// FindAllRemoteBranchesResponse ...
message FindAllRemoteBranchesResponse {
  // branches ...
  repeated Branch branches = 1;
}

// ListRefsRequest is a request for the ListRefs RPC.
message ListRefsRequest {
  // SortBy ...
  message SortBy {
    // Key ...
    enum Key {
      //  ...
      REFNAME       = 0; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
      //  ...
      CREATORDATE   = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
      //  ...
      AUTHORDATE    = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
      // COMMITTERDATE ...
      COMMITTERDATE = 3; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    }

    // Key is a key used for sorting.
    Key           key       = 1;
    // direction ...
    SortDirection direction = 2;
  }

  // Repository is the repository in which references should be listed in.
  Repository repository = 1 [(target_repository)=true];
  // Patterns contains all patterns which shall be listed. Patterns should be in the format
  // accepted by git-for-each-ref(1). At least one pattern must be given, otherwise an error
  // is returned. Patterns which don't match any reference will be silently ignored.
  repeated bytes patterns = 2;
  // Head determines whether the RPC should also return the HEAD reference. By default,
  // pseudo-refs are not included in the response.
  bool head = 3;
  // SortBy allows to request SHAs in particular order.
  SortBy sort_by = 4;
  // PointingAtOids is a list of OIDs that can optionally be passed to only return refs
  // pointing at the given OIDs. This corresponds to the --points-at option of git-for-each-ref(1).
  repeated bytes pointing_at_oids = 5;
  // PeelTags controls whether annotated tags should be peeled to their target objects so that the
  // `PeeledTarget` returned for the reference is the ID of the target object. Note that this
  // will significantly slow down the request by a factor of 3 to 4.
  bool peel_tags = 6;
}

// ListRefsResponse is a response for the ListRefs RPC. The RPC can return multiple responses
// in case there are more references than fit into a single gRPC message.
message ListRefsResponse{
  // Reference is a direct Git reference. No symbolic references will ever be returned by this RPC.
  message Reference {
    // Name is the fully qualified name of the reference.
    bytes name = 1;
    // Target is the object ID the reference points to.
    string target = 2;
    // PeeledTarget is the object ID an annotated tag points to. This field is only set when
    // `PeelTags=true`. This field is empty in case the object is not an annotated tag.
    string peeled_target = 3;
  }

  // References is the set of references returned by the RPC.
  repeated Reference references = 1;
}

// FindRefsByOIDRequest ...
message FindRefsByOIDRequest {
  // repository is the repository in which references will be looked for.
  Repository repository = 1 [(target_repository)=true];
  // oid is an object ID to find references for.
  string oid = 2;
  // ref_patterns can be one of branch name, tag name or fully qualified ref name.
  // Providing more than one pattern will yield refs that match any of the given patterns.
  // If left empty, defaults to "refs/heads/" and "refs/tags/"
  repeated string ref_patterns = 3;
  // sort_field determines the sort order of the resulting refs.
  // If left empty, defaults to "refname" (lexicographic refname order)
  string sort_field = 4;
  // limit limits the amount of results returned. 0 means no limit.
  uint32 limit = 5;
}

// FindRefsByOIDResponse ...
message FindRefsByOIDResponse {
  // refs is the set of fully-qualified references which have been found.
  repeated string refs = 1;
}
