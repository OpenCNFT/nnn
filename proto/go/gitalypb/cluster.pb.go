// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.23.1
// source: cluster.proto

package gitalypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RaftMessageType defines the types of messages that can be used within the Raft protocol.
// These types help in identifying the nature of the message being processed.
type RaftMessageType int32

const (
	// UNSPECIFIED is used to indicate unspecified message type enum.
	RaftMessageType_UNSPECIFIED RaftMessageType = 0 // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
	// NORMAL represents a standard Raft log entry proposed by the application.
	RaftMessageType_NORMAL RaftMessageType = 1 // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
	// VERIFICATION refers to a special type of no-op entries during leader
	// confirmation. Raft inserts such entries for verification.
	RaftMessageType_VERIFICATION RaftMessageType = 2 // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
	// CONFIG_CHANGE signifies a change in the configuration of the Raft cluster,
	// typically involving node additions or removals.
	RaftMessageType_CONFIG_CHANGE RaftMessageType = 3 // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
)

// Enum value maps for RaftMessageType.
var (
	RaftMessageType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NORMAL",
		2: "VERIFICATION",
		3: "CONFIG_CHANGE",
	}
	RaftMessageType_value = map[string]int32{
		"UNSPECIFIED":   0,
		"NORMAL":        1,
		"VERIFICATION":  2,
		"CONFIG_CHANGE": 3,
	}
)

func (x RaftMessageType) Enum() *RaftMessageType {
	p := new(RaftMessageType)
	*p = x
	return p
}

func (x RaftMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaftMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_cluster_proto_enumTypes[0].Descriptor()
}

func (RaftMessageType) Type() protoreflect.EnumType {
	return &file_cluster_proto_enumTypes[0]
}

func (x RaftMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaftMessageType.Descriptor instead.
func (RaftMessageType) EnumDescriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{0}
}

// RaftMessageV1 serves as a wrapper for messages exchanged in the Raft protocol,
// encapsulating essential information such as the log entry and related metadata.
type RaftMessageV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is unique identifier for the Raft message. This ID is generated by an
	// in-memory revent registry. Raft uses this ID to notify the committment
	// status of a log entry.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// cluster_id is the identifier of the Raft cluster to which this message belongs.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// authority_name is the storage name of storage that creates a partition.
	AuthorityName string `protobuf:"bytes,3,opt,name=authority_name,json=authorityName,proto3" json:"authority_name,omitempty"`
	// partition_id is the local incremental ID of the specific partition within a
	// storage. (authority_name, partition_id) can be used as a unique identifier
	// of a partition across the cluster.
	PartitionId uint64 `protobuf:"varint,4,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// log_entry is the actual log entry being processed or transmitted.
	LogEntry *LogEntry `protobuf:"bytes,5,opt,name=log_entry,json=logEntry,proto3" json:"log_entry,omitempty"`
	// log_data holds files inside log entry dir in one of two possible forms:
	// referenced or packed.
	//
	// Types that are assignable to LogData:
	//
	//	*RaftMessageV1_Referenced
	//	*RaftMessageV1_Packed
	LogData isRaftMessageV1_LogData `protobuf_oneof:"log_data"`
}

func (x *RaftMessageV1) Reset() {
	*x = RaftMessageV1{}
	mi := &file_cluster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftMessageV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftMessageV1) ProtoMessage() {}

func (x *RaftMessageV1) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftMessageV1.ProtoReflect.Descriptor instead.
func (*RaftMessageV1) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *RaftMessageV1) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RaftMessageV1) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RaftMessageV1) GetAuthorityName() string {
	if x != nil {
		return x.AuthorityName
	}
	return ""
}

func (x *RaftMessageV1) GetPartitionId() uint64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *RaftMessageV1) GetLogEntry() *LogEntry {
	if x != nil {
		return x.LogEntry
	}
	return nil
}

func (m *RaftMessageV1) GetLogData() isRaftMessageV1_LogData {
	if m != nil {
		return m.LogData
	}
	return nil
}

func (x *RaftMessageV1) GetReferenced() *RaftMessageV1_ReferencedLogData {
	if x, ok := x.GetLogData().(*RaftMessageV1_Referenced); ok {
		return x.Referenced
	}
	return nil
}

func (x *RaftMessageV1) GetPacked() *RaftMessageV1_PackedLogData {
	if x, ok := x.GetLogData().(*RaftMessageV1_Packed); ok {
		return x.Packed
	}
	return nil
}

type isRaftMessageV1_LogData interface {
	isRaftMessageV1_LogData()
}

type RaftMessageV1_Referenced struct {
	// referenced represents reference to on-disk log data.
	Referenced *RaftMessageV1_ReferencedLogData `protobuf:"bytes,6,opt,name=referenced,proto3,oneof"`
}

type RaftMessageV1_Packed struct {
	// packed represents packed and serialized log data.
	Packed *RaftMessageV1_PackedLogData `protobuf:"bytes,7,opt,name=packed,proto3,oneof"`
}

func (*RaftMessageV1_Referenced) isRaftMessageV1_LogData() {}

func (*RaftMessageV1_Packed) isRaftMessageV1_LogData() {}

// RaftHardStateV1 is a wrapper for raftpb.HardState. The upstream uses proto2
// syntax while Gitaly uses proto3. In addition, the protobuf package in
// upstream is outdated. The generated structs are not compatible with Gitaly's
// protobuf utilities.
// Source:
// https://github.com/etcd-io/raft/blob/12f0e5dc1b5bfff9bc6886ef1be4cba19495d6f2/raftpb/raft.proto#L110-114
type RaftHardStateV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// term represents the current term of the raft group.
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// vote represents the vote of the raft group.
	Vote uint64 `protobuf:"varint,2,opt,name=vote,proto3" json:"vote,omitempty"`
	// commit represents the latest commit index of the raft group.
	Commit uint64 `protobuf:"varint,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *RaftHardStateV1) Reset() {
	*x = RaftHardStateV1{}
	mi := &file_cluster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftHardStateV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftHardStateV1) ProtoMessage() {}

func (x *RaftHardStateV1) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftHardStateV1.ProtoReflect.Descriptor instead.
func (*RaftHardStateV1) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *RaftHardStateV1) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RaftHardStateV1) GetVote() uint64 {
	if x != nil {
		return x.Vote
	}
	return 0
}

func (x *RaftHardStateV1) GetCommit() uint64 {
	if x != nil {
		return x.Commit
	}
	return 0
}

// RaftConfStateV1 is a wrapper for raftpb.ConfState. For more information,
// please refer to RaftHardStateV1. Source:
// https://github.com/etcd-io/raft/blob/12f0e5dc1b5bfff9bc6886ef1be4cba19495d6f2/raftpb/raft.proto#L136
type RaftConfStateV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// voters in the incoming config. (If the configuration is not joint,
	// then the outgoing config is empty).
	Voters []uint64 `protobuf:"varint,1,rep,packed,name=voters,proto3" json:"voters,omitempty"`
	// learners in the incoming config.
	Learners []uint64 `protobuf:"varint,2,rep,packed,name=learners,proto3" json:"learners,omitempty"`
	// voters_outgoing in the outgoing config.
	VotersOutgoing []uint64 `protobuf:"varint,3,rep,packed,name=voters_outgoing,json=votersOutgoing,proto3" json:"voters_outgoing,omitempty"` // protolint:disable:this REPEATED_FIELD_NAMES_PLURALIZED
	// learners_next is the nodes that will become learners when the outgoing
	// config is removed. These nodes are necessarily currently in nodes_joint (or
	// they would have been added to the incoming config right away).
	LearnersNext []uint64 `protobuf:"varint,4,rep,packed,name=learners_next,json=learnersNext,proto3" json:"learners_next,omitempty"` // protolint:disable:this REPEATED_FIELD_NAMES_PLURALIZED
	// auto_leave is set when the config is joint and Raft will automatically
	// transition into the final config (i.e. remove the outgoing config) when
	// this is safe.
	AutoLeave bool `protobuf:"varint,5,opt,name=auto_leave,json=autoLeave,proto3" json:"auto_leave,omitempty"`
}

func (x *RaftConfStateV1) Reset() {
	*x = RaftConfStateV1{}
	mi := &file_cluster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftConfStateV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftConfStateV1) ProtoMessage() {}

func (x *RaftConfStateV1) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftConfStateV1.ProtoReflect.Descriptor instead.
func (*RaftConfStateV1) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *RaftConfStateV1) GetVoters() []uint64 {
	if x != nil {
		return x.Voters
	}
	return nil
}

func (x *RaftConfStateV1) GetLearners() []uint64 {
	if x != nil {
		return x.Learners
	}
	return nil
}

func (x *RaftConfStateV1) GetVotersOutgoing() []uint64 {
	if x != nil {
		return x.VotersOutgoing
	}
	return nil
}

func (x *RaftConfStateV1) GetLearnersNext() []uint64 {
	if x != nil {
		return x.LearnersNext
	}
	return nil
}

func (x *RaftConfStateV1) GetAutoLeave() bool {
	if x != nil {
		return x.AutoLeave
	}
	return false
}

// ReferencedLogData holds a reference path to the log data stored externally,
// which can be used to access large log entries without including them directly.
type RaftMessageV1_ReferencedLogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path represents the external storage location of the log data.
	Path []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RaftMessageV1_ReferencedLogData) Reset() {
	*x = RaftMessageV1_ReferencedLogData{}
	mi := &file_cluster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftMessageV1_ReferencedLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftMessageV1_ReferencedLogData) ProtoMessage() {}

func (x *RaftMessageV1_ReferencedLogData) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftMessageV1_ReferencedLogData.ProtoReflect.Descriptor instead.
func (*RaftMessageV1_ReferencedLogData) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RaftMessageV1_ReferencedLogData) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

// PackedLogData contains serialized log data including log entry itself and
// all attached files in the log entry directory. Those data are exchanged at
// the Transport layer before sending after after receiving messages. Hence,
// they are transparent to the core Raft engine.
type RaftMessageV1_PackedLogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data is serialized form of the log entry data. Transport implementations
	// can choose to populate this data or read the data directly on disk. The
	// latter approach is recommended.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RaftMessageV1_PackedLogData) Reset() {
	*x = RaftMessageV1_PackedLogData{}
	mi := &file_cluster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftMessageV1_PackedLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftMessageV1_PackedLogData) ProtoMessage() {}

func (x *RaftMessageV1_PackedLogData) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftMessageV1_PackedLogData.ProtoReflect.Descriptor instead.
func (*RaftMessageV1_PackedLogData) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RaftMessageV1_PackedLogData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_cluster_proto protoreflect.FileDescriptor

var file_cluster_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9b, 0x03, 0x0a, 0x0d, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x56, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x31, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x1a, 0x27, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a,
	0x23, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x51, 0x0a, 0x0f, 0x52, 0x61, 0x66, 0x74, 0x48, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x56, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x6f, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x73,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x72, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x2a, 0x53, 0x0a, 0x0f, 0x52, 0x61, 0x66, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x42, 0x34, 0x5a,
	0x32, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2f, 0x76, 0x31,
	0x36, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cluster_proto_rawDescOnce sync.Once
	file_cluster_proto_rawDescData = file_cluster_proto_rawDesc
)

func file_cluster_proto_rawDescGZIP() []byte {
	file_cluster_proto_rawDescOnce.Do(func() {
		file_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_cluster_proto_rawDescData)
	})
	return file_cluster_proto_rawDescData
}

var file_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cluster_proto_goTypes = []any{
	(RaftMessageType)(0),                    // 0: gitaly.RaftMessageType
	(*RaftMessageV1)(nil),                   // 1: gitaly.RaftMessageV1
	(*RaftHardStateV1)(nil),                 // 2: gitaly.RaftHardStateV1
	(*RaftConfStateV1)(nil),                 // 3: gitaly.RaftConfStateV1
	(*RaftMessageV1_ReferencedLogData)(nil), // 4: gitaly.RaftMessageV1.ReferencedLogData
	(*RaftMessageV1_PackedLogData)(nil),     // 5: gitaly.RaftMessageV1.PackedLogData
	(*LogEntry)(nil),                        // 6: gitaly.LogEntry
}
var file_cluster_proto_depIdxs = []int32{
	6, // 0: gitaly.RaftMessageV1.log_entry:type_name -> gitaly.LogEntry
	4, // 1: gitaly.RaftMessageV1.referenced:type_name -> gitaly.RaftMessageV1.ReferencedLogData
	5, // 2: gitaly.RaftMessageV1.packed:type_name -> gitaly.RaftMessageV1.PackedLogData
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_cluster_proto_init() }
func file_cluster_proto_init() {
	if File_cluster_proto != nil {
		return
	}
	file_log_proto_init()
	file_cluster_proto_msgTypes[0].OneofWrappers = []any{
		(*RaftMessageV1_Referenced)(nil),
		(*RaftMessageV1_Packed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cluster_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cluster_proto_goTypes,
		DependencyIndexes: file_cluster_proto_depIdxs,
		EnumInfos:         file_cluster_proto_enumTypes,
		MessageInfos:      file_cluster_proto_msgTypes,
	}.Build()
	File_cluster_proto = out.File
	file_cluster_proto_rawDesc = nil
	file_cluster_proto_goTypes = nil
	file_cluster_proto_depIdxs = nil
}
