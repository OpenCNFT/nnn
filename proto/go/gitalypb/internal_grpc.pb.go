// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.1
// source: internal.proto

package gitalypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InternalGitaly_WalkRepos_FullMethodName = "/gitaly.InternalGitaly/WalkRepos"
)

// InternalGitalyClient is the client API for InternalGitaly service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InternalGitaly is a gRPC service meant to be served by a Gitaly node, but
// only reachable by Praefect or other Gitalies
type InternalGitalyClient interface {
	// WalkRepos walks the storage and streams back all known git repos on the
	// requested storage
	WalkRepos(ctx context.Context, in *WalkReposRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WalkReposResponse], error)
}

type internalGitalyClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalGitalyClient(cc grpc.ClientConnInterface) InternalGitalyClient {
	return &internalGitalyClient{cc}
}

func (c *internalGitalyClient) WalkRepos(ctx context.Context, in *WalkReposRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WalkReposResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InternalGitaly_ServiceDesc.Streams[0], InternalGitaly_WalkRepos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WalkReposRequest, WalkReposResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InternalGitaly_WalkReposClient = grpc.ServerStreamingClient[WalkReposResponse]

// InternalGitalyServer is the server API for InternalGitaly service.
// All implementations must embed UnimplementedInternalGitalyServer
// for forward compatibility.
//
// InternalGitaly is a gRPC service meant to be served by a Gitaly node, but
// only reachable by Praefect or other Gitalies
type InternalGitalyServer interface {
	// WalkRepos walks the storage and streams back all known git repos on the
	// requested storage
	WalkRepos(*WalkReposRequest, grpc.ServerStreamingServer[WalkReposResponse]) error
	mustEmbedUnimplementedInternalGitalyServer()
}

// UnimplementedInternalGitalyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalGitalyServer struct{}

func (UnimplementedInternalGitalyServer) WalkRepos(*WalkReposRequest, grpc.ServerStreamingServer[WalkReposResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WalkRepos not implemented")
}
func (UnimplementedInternalGitalyServer) mustEmbedUnimplementedInternalGitalyServer() {}
func (UnimplementedInternalGitalyServer) testEmbeddedByValue()                        {}

// UnsafeInternalGitalyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalGitalyServer will
// result in compilation errors.
type UnsafeInternalGitalyServer interface {
	mustEmbedUnimplementedInternalGitalyServer()
}

func RegisterInternalGitalyServer(s grpc.ServiceRegistrar, srv InternalGitalyServer) {
	// If the following call pancis, it indicates UnimplementedInternalGitalyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InternalGitaly_ServiceDesc, srv)
}

func _InternalGitaly_WalkRepos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WalkReposRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalGitalyServer).WalkRepos(m, &grpc.GenericServerStream[WalkReposRequest, WalkReposResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InternalGitaly_WalkReposServer = grpc.ServerStreamingServer[WalkReposResponse]

// InternalGitaly_ServiceDesc is the grpc.ServiceDesc for InternalGitaly service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalGitaly_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.InternalGitaly",
	HandlerType: (*InternalGitalyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WalkRepos",
			Handler:       _InternalGitaly_WalkRepos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal.proto",
}
