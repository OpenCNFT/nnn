// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shared.proto

package gitalypb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ObjectType int32

const (
	ObjectType_UNKNOWN ObjectType = 0
	ObjectType_COMMIT  ObjectType = 1
	ObjectType_BLOB    ObjectType = 2
	ObjectType_TREE    ObjectType = 3
	ObjectType_TAG     ObjectType = 4
)

var ObjectType_name = map[int32]string{
	0: "UNKNOWN",
	1: "COMMIT",
	2: "BLOB",
	3: "TREE",
	4: "TAG",
}

var ObjectType_value = map[string]int32{
	"UNKNOWN": 0,
	"COMMIT":  1,
	"BLOB":    2,
	"TREE":    3,
	"TAG":     4,
}

func (x ObjectType) String() string {
	return proto.EnumName(ObjectType_name, int32(x))
}

func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d8a4e87e678c5ced, []int{0}
}

type SignatureType int32

const (
	SignatureType_NONE SignatureType = 0
	SignatureType_PGP  SignatureType = 1
	SignatureType_X509 SignatureType = 2
)

var SignatureType_name = map[int32]string{
	0: "NONE",
	1: "PGP",
	2: "X509",
}

var SignatureType_value = map[string]int32{
	"NONE": 0,
	"PGP":  1,
	"X509": 2,
}

func (x SignatureType) String() string {
	return proto.EnumName(SignatureType_name, int32(x))
}

func (SignatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d8a4e87e678c5ced, []int{1}
}

type Repository struct {
	StorageName  string `protobuf:"bytes,2,opt,name=storage_name,json=storageName,proto3" json:"storage_name,omitempty"`
	RelativePath string `protobuf:"bytes,3,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	// Sets the GIT_OBJECT_DIRECTORY envvar on git commands to the value of this field.
	// It influences the object storage directory the SHA1 directories are created underneath.
	GitObjectDirectory string `protobuf:"bytes,4,opt,name=git_object_directory,json=gitObjectDirectory,proto3" json:"git_object_directory,omitempty"`
	// Sets the GIT_ALTERNATE_OBJECT_DIRECTORIES envvar on git commands to the values of this field.
	// It influences the list of Git object directories which can be used to search for Git objects.
	GitAlternateObjectDirectories []string `protobuf:"bytes,5,rep,name=git_alternate_object_directories,json=gitAlternateObjectDirectories,proto3" json:"git_alternate_object_directories,omitempty"`
	// Used in callbacks to GitLab so that it knows what repository the event is
	// associated with. May be left empty on RPC's that do not perform callbacks.
	// During project creation, `gl_repository` may not be known.
	GlRepository string `protobuf:"bytes,6,opt,name=gl_repository,json=glRepository,proto3" json:"gl_repository,omitempty"`
	// The human-readable GitLab project path (e.g. gitlab-org/gitlab-ce).
	// When hashed storage is use, this associates a project path with its
	// path on disk. The name can change over time (e.g. when a project is
	// renamed). This is primarily used for logging/debugging at the
	// moment.
	GlProjectPath        string   `protobuf:"bytes,8,opt,name=gl_project_path,json=glProjectPath,proto3" json:"gl_project_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Repository) Reset()         { *m = Repository{} }
func (m *Repository) String() string { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()    {}
func (*Repository) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a4e87e678c5ced, []int{0}
}

func (m *Repository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repository.Unmarshal(m, b)
}
func (m *Repository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repository.Marshal(b, m, deterministic)
}
func (m *Repository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository.Merge(m, src)
}
func (m *Repository) XXX_Size() int {
	return xxx_messageInfo_Repository.Size(m)
}
func (m *Repository) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository.DiscardUnknown(m)
}

var xxx_messageInfo_Repository proto.InternalMessageInfo

func (m *Repository) GetStorageName() string {
	if m != nil {
		return m.StorageName
	}
	return ""
}

func (m *Repository) GetRelativePath() string {
	if m != nil {
		return m.RelativePath
	}
	return ""
}

func (m *Repository) GetGitObjectDirectory() string {
	if m != nil {
		return m.GitObjectDirectory
	}
	return ""
}

func (m *Repository) GetGitAlternateObjectDirectories() []string {
	if m != nil {
		return m.GitAlternateObjectDirectories
	}
	return nil
}

func (m *Repository) GetGlRepository() string {
	if m != nil {
		return m.GlRepository
	}
	return ""
}

func (m *Repository) GetGlProjectPath() string {
	if m != nil {
		return m.GlProjectPath
	}
	return ""
}

// Corresponds to Gitlab::Git::Commit
type GitCommit struct {
	Id        string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subject   []byte        `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Body      []byte        `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Author    *CommitAuthor `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Committer *CommitAuthor `protobuf:"bytes,5,opt,name=committer,proto3" json:"committer,omitempty"`
	ParentIds []string      `protobuf:"bytes,6,rep,name=parent_ids,json=parentIds,proto3" json:"parent_ids,omitempty"`
	// If body exceeds a certain threshold, it will be nullified,
	// but its size will be set in body_size so we can know if
	// a commit had a body in the first place.
	BodySize             int64         `protobuf:"varint,7,opt,name=body_size,json=bodySize,proto3" json:"body_size,omitempty"`
	SignatureType        SignatureType `protobuf:"varint,8,opt,name=signature_type,json=signatureType,proto3,enum=gitaly.SignatureType" json:"signature_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GitCommit) Reset()         { *m = GitCommit{} }
func (m *GitCommit) String() string { return proto.CompactTextString(m) }
func (*GitCommit) ProtoMessage()    {}
func (*GitCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a4e87e678c5ced, []int{1}
}

func (m *GitCommit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitCommit.Unmarshal(m, b)
}
func (m *GitCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitCommit.Marshal(b, m, deterministic)
}
func (m *GitCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitCommit.Merge(m, src)
}
func (m *GitCommit) XXX_Size() int {
	return xxx_messageInfo_GitCommit.Size(m)
}
func (m *GitCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_GitCommit.DiscardUnknown(m)
}

var xxx_messageInfo_GitCommit proto.InternalMessageInfo

func (m *GitCommit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GitCommit) GetSubject() []byte {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *GitCommit) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *GitCommit) GetAuthor() *CommitAuthor {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *GitCommit) GetCommitter() *CommitAuthor {
	if m != nil {
		return m.Committer
	}
	return nil
}

func (m *GitCommit) GetParentIds() []string {
	if m != nil {
		return m.ParentIds
	}
	return nil
}

func (m *GitCommit) GetBodySize() int64 {
	if m != nil {
		return m.BodySize
	}
	return 0
}

func (m *GitCommit) GetSignatureType() SignatureType {
	if m != nil {
		return m.SignatureType
	}
	return SignatureType_NONE
}

type CommitAuthor struct {
	Name                 []byte               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email                []byte               `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Timezone             []byte               `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CommitAuthor) Reset()         { *m = CommitAuthor{} }
func (m *CommitAuthor) String() string { return proto.CompactTextString(m) }
func (*CommitAuthor) ProtoMessage()    {}
func (*CommitAuthor) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a4e87e678c5ced, []int{2}
}

func (m *CommitAuthor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitAuthor.Unmarshal(m, b)
}
func (m *CommitAuthor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitAuthor.Marshal(b, m, deterministic)
}
func (m *CommitAuthor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitAuthor.Merge(m, src)
}
func (m *CommitAuthor) XXX_Size() int {
	return xxx_messageInfo_CommitAuthor.Size(m)
}
func (m *CommitAuthor) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitAuthor.DiscardUnknown(m)
}

var xxx_messageInfo_CommitAuthor proto.InternalMessageInfo

func (m *CommitAuthor) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CommitAuthor) GetEmail() []byte {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *CommitAuthor) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *CommitAuthor) GetTimezone() []byte {
	if m != nil {
		return m.Timezone
	}
	return nil
}

type ExitStatus struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExitStatus) Reset()         { *m = ExitStatus{} }
func (m *ExitStatus) String() string { return proto.CompactTextString(m) }
func (*ExitStatus) ProtoMessage()    {}
func (*ExitStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a4e87e678c5ced, []int{3}
}

func (m *ExitStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExitStatus.Unmarshal(m, b)
}
func (m *ExitStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExitStatus.Marshal(b, m, deterministic)
}
func (m *ExitStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitStatus.Merge(m, src)
}
func (m *ExitStatus) XXX_Size() int {
	return xxx_messageInfo_ExitStatus.Size(m)
}
func (m *ExitStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ExitStatus proto.InternalMessageInfo

func (m *ExitStatus) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Corresponds to Gitlab::Git::Branch
type Branch struct {
	Name                 []byte     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TargetCommit         *GitCommit `protobuf:"bytes,2,opt,name=target_commit,json=targetCommit,proto3" json:"target_commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Branch) Reset()         { *m = Branch{} }
func (m *Branch) String() string { return proto.CompactTextString(m) }
func (*Branch) ProtoMessage()    {}
func (*Branch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a4e87e678c5ced, []int{4}
}

func (m *Branch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Branch.Unmarshal(m, b)
}
func (m *Branch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Branch.Marshal(b, m, deterministic)
}
func (m *Branch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Branch.Merge(m, src)
}
func (m *Branch) XXX_Size() int {
	return xxx_messageInfo_Branch.Size(m)
}
func (m *Branch) XXX_DiscardUnknown() {
	xxx_messageInfo_Branch.DiscardUnknown(m)
}

var xxx_messageInfo_Branch proto.InternalMessageInfo

func (m *Branch) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Branch) GetTargetCommit() *GitCommit {
	if m != nil {
		return m.TargetCommit
	}
	return nil
}

type Tag struct {
	Name         []byte     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id           string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TargetCommit *GitCommit `protobuf:"bytes,3,opt,name=target_commit,json=targetCommit,proto3" json:"target_commit,omitempty"`
	// If message exceeds a certain threshold, it will be nullified,
	// but its size will be set in message_size so we can know if
	// a tag had a message in the first place.
	Message              []byte        `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	MessageSize          int64         `protobuf:"varint,5,opt,name=message_size,json=messageSize,proto3" json:"message_size,omitempty"`
	Tagger               *CommitAuthor `protobuf:"bytes,6,opt,name=tagger,proto3" json:"tagger,omitempty"`
	SignatureType        SignatureType `protobuf:"varint,7,opt,name=signature_type,json=signatureType,proto3,enum=gitaly.SignatureType" json:"signature_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a4e87e678c5ced, []int{5}
}

func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Tag) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tag) GetTargetCommit() *GitCommit {
	if m != nil {
		return m.TargetCommit
	}
	return nil
}

func (m *Tag) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Tag) GetMessageSize() int64 {
	if m != nil {
		return m.MessageSize
	}
	return 0
}

func (m *Tag) GetTagger() *CommitAuthor {
	if m != nil {
		return m.Tagger
	}
	return nil
}

func (m *Tag) GetSignatureType() SignatureType {
	if m != nil {
		return m.SignatureType
	}
	return SignatureType_NONE
}

type User struct {
	GlId                 string   `protobuf:"bytes,1,opt,name=gl_id,json=glId,proto3" json:"gl_id,omitempty"`
	Name                 []byte   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email                []byte   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	GlUsername           string   `protobuf:"bytes,4,opt,name=gl_username,json=glUsername,proto3" json:"gl_username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a4e87e678c5ced, []int{6}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetGlId() string {
	if m != nil {
		return m.GlId
	}
	return ""
}

func (m *User) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *User) GetEmail() []byte {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *User) GetGlUsername() string {
	if m != nil {
		return m.GlUsername
	}
	return ""
}

type ObjectPool struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ObjectPool) Reset()         { *m = ObjectPool{} }
func (m *ObjectPool) String() string { return proto.CompactTextString(m) }
func (*ObjectPool) ProtoMessage()    {}
func (*ObjectPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a4e87e678c5ced, []int{7}
}

func (m *ObjectPool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectPool.Unmarshal(m, b)
}
func (m *ObjectPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectPool.Marshal(b, m, deterministic)
}
func (m *ObjectPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectPool.Merge(m, src)
}
func (m *ObjectPool) XXX_Size() int {
	return xxx_messageInfo_ObjectPool.Size(m)
}
func (m *ObjectPool) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectPool.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectPool proto.InternalMessageInfo

func (m *ObjectPool) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func init() {
	proto.RegisterEnum("gitaly.ObjectType", ObjectType_name, ObjectType_value)
	proto.RegisterEnum("gitaly.SignatureType", SignatureType_name, SignatureType_value)
	proto.RegisterType((*Repository)(nil), "gitaly.Repository")
	proto.RegisterType((*GitCommit)(nil), "gitaly.GitCommit")
	proto.RegisterType((*CommitAuthor)(nil), "gitaly.CommitAuthor")
	proto.RegisterType((*ExitStatus)(nil), "gitaly.ExitStatus")
	proto.RegisterType((*Branch)(nil), "gitaly.Branch")
	proto.RegisterType((*Tag)(nil), "gitaly.Tag")
	proto.RegisterType((*User)(nil), "gitaly.User")
	proto.RegisterType((*ObjectPool)(nil), "gitaly.ObjectPool")
}

func init() { proto.RegisterFile("shared.proto", fileDescriptor_d8a4e87e678c5ced) }

var fileDescriptor_d8a4e87e678c5ced = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x8f, 0xe3, 0x34,
	0x14, 0xdd, 0xa4, 0xe9, 0xd7, 0x6d, 0x3b, 0x04, 0x33, 0x48, 0xd1, 0xa0, 0xd5, 0x96, 0x20, 0xa1,
	0xd1, 0x6a, 0x48, 0x47, 0x45, 0x20, 0x90, 0x78, 0x99, 0x2e, 0xc3, 0x68, 0x16, 0xb6, 0xad, 0x32,
	0x1d, 0x81, 0x78, 0x89, 0xdc, 0xc6, 0xeb, 0x1a, 0x39, 0x75, 0x64, 0xbb, 0x2b, 0x3a, 0xcf, 0x3c,
	0xf1, 0xc4, 0x9f, 0xe0, 0x95, 0x9f, 0xc1, 0xef, 0x42, 0xb6, 0x93, 0x6e, 0x77, 0x29, 0x08, 0xde,
	0xee, 0xbd, 0x3e, 0xbe, 0x3e, 0xf7, 0xf8, 0xd8, 0xd0, 0x57, 0x6b, 0x2c, 0x49, 0x9e, 0x94, 0x52,
	0x68, 0x81, 0x5a, 0x94, 0x69, 0xcc, 0x77, 0x67, 0x4f, 0xa8, 0x10, 0x94, 0x93, 0x91, 0xad, 0x2e,
	0xb7, 0x2f, 0x47, 0x9a, 0x15, 0x44, 0x69, 0x5c, 0x94, 0x0e, 0x78, 0x36, 0x7c, 0x1b, 0x90, 0x13,
	0xb5, 0x92, 0xac, 0xd4, 0x42, 0x56, 0x08, 0xe0, 0x6c, 0xa3, 0x5d, 0x1c, 0xff, 0xe1, 0x03, 0xa4,
	0xa4, 0x14, 0x8a, 0x69, 0x21, 0x77, 0xe8, 0x43, 0xe8, 0x2b, 0x2d, 0x24, 0xa6, 0x24, 0xdb, 0xe0,
	0x82, 0x44, 0xfe, 0xd0, 0x3b, 0xef, 0xa6, 0xbd, 0xaa, 0x36, 0xc5, 0x05, 0x41, 0x1f, 0xc1, 0x40,
	0x12, 0x8e, 0x35, 0x7b, 0x45, 0xb2, 0x12, 0xeb, 0x75, 0xd4, 0xb0, 0x98, 0x7e, 0x5d, 0x9c, 0x63,
	0xbd, 0x46, 0x97, 0x70, 0x4a, 0x99, 0xce, 0xc4, 0xf2, 0x27, 0xb2, 0xd2, 0x59, 0xce, 0x24, 0x59,
	0x99, 0xfe, 0x51, 0x60, 0xb1, 0x88, 0x32, 0x3d, 0xb3, 0x4b, 0x5f, 0xd7, 0x2b, 0xe8, 0x06, 0x86,
	0x66, 0x07, 0xe6, 0x9a, 0xc8, 0x0d, 0xd6, 0xe4, 0xed, 0xbd, 0x8c, 0xa8, 0xa8, 0x39, 0x6c, 0x9c,
	0x77, 0xd3, 0xc7, 0x94, 0xe9, 0xab, 0x1a, 0xf6, 0x66, 0x1b, 0x46, 0x94, 0xe1, 0x47, 0x79, 0x26,
	0xf7, 0x33, 0x45, 0x2d, 0xc7, 0x8f, 0xf2, 0x83, 0x39, 0x3f, 0x86, 0x77, 0x28, 0xcf, 0x4a, 0x29,
	0xec, 0x19, 0x76, 0x8c, 0x8e, 0x85, 0x0d, 0x28, 0x9f, 0xbb, 0xaa, 0x99, 0xe3, 0x79, 0xd0, 0xf1,
	0x42, 0xff, 0x79, 0xd0, 0x69, 0x87, 0x9d, 0x34, 0x30, 0xb0, 0xf8, 0x77, 0x1f, 0xba, 0x37, 0x4c,
	0x3f, 0x13, 0x45, 0xc1, 0x34, 0x3a, 0x01, 0x9f, 0xe5, 0x91, 0x67, 0xb7, 0xfa, 0x2c, 0x47, 0x11,
	0xb4, 0xd5, 0xd6, 0x52, 0xb2, 0xd2, 0xf5, 0xd3, 0x3a, 0x45, 0x08, 0x82, 0xa5, 0xc8, 0x77, 0x56,
	0xad, 0x7e, 0x6a, 0x63, 0x74, 0x01, 0x2d, 0xbc, 0xd5, 0x6b, 0x21, 0xad, 0x2e, 0xbd, 0xf1, 0x69,
	0xe2, 0x2e, 0x39, 0x71, 0xdd, 0xaf, 0xec, 0x5a, 0x5a, 0x61, 0xd0, 0x18, 0xba, 0x2b, 0x5b, 0xd7,
	0x44, 0x46, 0xcd, 0x7f, 0xd9, 0xf0, 0x1a, 0x86, 0x1e, 0x03, 0x94, 0x58, 0x92, 0x8d, 0xce, 0x58,
	0xae, 0xa2, 0x96, 0xd5, 0xaf, 0xeb, 0x2a, 0xb7, 0xb9, 0x42, 0x1f, 0x40, 0xd7, 0x10, 0xc9, 0x14,
	0x7b, 0x20, 0x51, 0x7b, 0xe8, 0x9d, 0x37, 0xd2, 0x8e, 0x29, 0xdc, 0xb1, 0x07, 0x82, 0xbe, 0x82,
	0x13, 0xc5, 0xe8, 0x06, 0xeb, 0xad, 0x24, 0x99, 0xde, 0x95, 0xc4, 0x4a, 0x74, 0x32, 0x7e, 0xbf,
	0x3e, 0xf4, 0xae, 0x5e, 0x5d, 0xec, 0x4a, 0x92, 0x0e, 0xd4, 0x61, 0x1a, 0xff, 0xe2, 0x41, 0xff,
	0x90, 0x95, 0x11, 0xc0, 0x5a, 0xca, 0x73, 0x02, 0x98, 0x18, 0x9d, 0x42, 0x93, 0x14, 0x98, 0xf1,
	0x4a, 0x2c, 0x97, 0xa0, 0x04, 0x82, 0x1c, 0x6b, 0x62, 0xa5, 0xea, 0x8d, 0xcf, 0x12, 0x67, 0xe8,
	0xa4, 0x36, 0x74, 0xb2, 0xa8, 0x1d, 0x9f, 0x5a, 0x1c, 0x3a, 0x83, 0x8e, 0x79, 0x04, 0x0f, 0x62,
	0x43, 0xac, 0x90, 0xfd, 0x74, 0x9f, 0xc7, 0x31, 0xc0, 0xf5, 0xcf, 0x4c, 0xdf, 0x69, 0xac, 0xb7,
	0xca, 0x9c, 0xf7, 0x0a, 0xf3, 0xad, 0x23, 0xd1, 0x4c, 0x5d, 0x12, 0x2f, 0xa0, 0x35, 0x91, 0x78,
	0xb3, 0x5a, 0x1f, 0xe5, 0xf8, 0x39, 0x0c, 0x34, 0x96, 0x94, 0xe8, 0xcc, 0xc9, 0x6a, 0xb9, 0xf6,
	0xc6, 0xef, 0xd6, 0x2a, 0xec, 0xcd, 0x90, 0xf6, 0x1d, 0xce, 0x65, 0xf1, 0xaf, 0x3e, 0x34, 0x16,
	0x98, 0x1e, 0xed, 0xe9, 0x6c, 0xe3, 0xef, 0x6d, 0xf3, 0xb7, 0x33, 0x1a, 0xff, 0xe9, 0x0c, 0x63,
	0xb7, 0x82, 0x28, 0x85, 0x69, 0x3d, 0x78, 0x9d, 0x9a, 0x87, 0x5c, 0x85, 0xee, 0x72, 0x9b, 0xf6,
	0x72, 0x7b, 0x55, 0xcd, 0xde, 0xef, 0x05, 0xb4, 0x34, 0xa6, 0x94, 0x48, 0xfb, 0x42, 0xfe, 0xd1,
	0x7d, 0x0e, 0x73, 0xc4, 0x0d, 0xed, 0xff, 0xe1, 0x86, 0x97, 0x10, 0xdc, 0x2b, 0x22, 0xd1, 0x7b,
	0xd0, 0xa4, 0x3c, 0xdb, 0x3f, 0x99, 0x80, 0xf2, 0xdb, 0x7c, 0xaf, 0x90, 0x7f, 0xcc, 0x19, 0x8d,
	0x43, 0x67, 0x3c, 0x81, 0x1e, 0xe5, 0xd9, 0x56, 0x99, 0xb7, 0x5f, 0x90, 0xea, 0x37, 0x01, 0xca,
	0xef, 0xab, 0x4a, 0xfc, 0x0d, 0x80, 0xfb, 0x11, 0xe6, 0x42, 0x70, 0xf4, 0x05, 0xc0, 0xc1, 0x3f,
	0xe0, 0xd9, 0x29, 0x51, 0xcd, 0xf7, 0xf5, 0x6f, 0x30, 0x09, 0x7e, 0xfb, 0xf3, 0xc2, 0x4b, 0x0f,
	0xb0, 0x4f, 0x27, 0x75, 0x1f, 0xc3, 0x1e, 0xf5, 0xa0, 0x7d, 0x3f, 0xfd, 0x76, 0x3a, 0xfb, 0x7e,
	0x1a, 0x3e, 0x42, 0x00, 0xad, 0x67, 0xb3, 0x17, 0x2f, 0x6e, 0x17, 0xa1, 0x87, 0x3a, 0x10, 0x4c,
	0xbe, 0x9b, 0x4d, 0x42, 0xdf, 0x44, 0x8b, 0xf4, 0xfa, 0x3a, 0x6c, 0xa0, 0x36, 0x34, 0x16, 0x57,
	0x37, 0x61, 0xf0, 0xf4, 0x02, 0x06, 0x6f, 0x68, 0x62, 0x30, 0xd3, 0xd9, 0xf4, 0x3a, 0x7c, 0x64,
	0x30, 0xf3, 0x9b, 0xb9, 0x6b, 0xf0, 0xc3, 0x67, 0x97, 0x5f, 0x86, 0xfe, 0xe4, 0xf2, 0x47, 0x43,
	0x8c, 0xe3, 0x65, 0xb2, 0x12, 0xc5, 0xc8, 0x85, 0x9f, 0x08, 0x49, 0x47, 0x8e, 0xae, 0xfb, 0xce,
	0x47, 0x54, 0x54, 0x79, 0xb9, 0x5c, 0xb6, 0x6c, 0xe9, 0xd3, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xbd, 0x0c, 0x8a, 0xec, 0x28, 0x06, 0x00, 0x00,
}
