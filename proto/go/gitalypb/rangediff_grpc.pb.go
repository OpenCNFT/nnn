// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: rangediff.proto

package gitalypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RangeDiffServiceClient is the client API for RangeDiffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RangeDiffServiceClient interface {
	// RPC method to compare ranges and retrieve the difference
	CompareRanges(ctx context.Context, in *RangeDiffRequest, opts ...grpc.CallOption) (RangeDiffService_CompareRangesClient, error)
	RawRangeDiff(ctx context.Context, in *RangeDiffRequest, opts ...grpc.CallOption) (RangeDiffService_RawRangeDiffClient, error)
}

type rangeDiffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRangeDiffServiceClient(cc grpc.ClientConnInterface) RangeDiffServiceClient {
	return &rangeDiffServiceClient{cc}
}

func (c *rangeDiffServiceClient) CompareRanges(ctx context.Context, in *RangeDiffRequest, opts ...grpc.CallOption) (RangeDiffService_CompareRangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RangeDiffService_ServiceDesc.Streams[0], "/gitaly.RangeDiffService/CompareRanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDiffServiceCompareRangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDiffService_CompareRangesClient interface {
	Recv() (*RangeDiffResponse, error)
	grpc.ClientStream
}

type rangeDiffServiceCompareRangesClient struct {
	grpc.ClientStream
}

func (x *rangeDiffServiceCompareRangesClient) Recv() (*RangeDiffResponse, error) {
	m := new(RangeDiffResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDiffServiceClient) RawRangeDiff(ctx context.Context, in *RangeDiffRequest, opts ...grpc.CallOption) (RangeDiffService_RawRangeDiffClient, error) {
	stream, err := c.cc.NewStream(ctx, &RangeDiffService_ServiceDesc.Streams[1], "/gitaly.RangeDiffService/RawRangeDiff", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDiffServiceRawRangeDiffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDiffService_RawRangeDiffClient interface {
	Recv() (*RawRangeDiffResponse, error)
	grpc.ClientStream
}

type rangeDiffServiceRawRangeDiffClient struct {
	grpc.ClientStream
}

func (x *rangeDiffServiceRawRangeDiffClient) Recv() (*RawRangeDiffResponse, error) {
	m := new(RawRangeDiffResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RangeDiffServiceServer is the server API for RangeDiffService service.
// All implementations must embed UnimplementedRangeDiffServiceServer
// for forward compatibility
type RangeDiffServiceServer interface {
	// RPC method to compare ranges and retrieve the difference
	CompareRanges(*RangeDiffRequest, RangeDiffService_CompareRangesServer) error
	RawRangeDiff(*RangeDiffRequest, RangeDiffService_RawRangeDiffServer) error
	mustEmbedUnimplementedRangeDiffServiceServer()
}

// UnimplementedRangeDiffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRangeDiffServiceServer struct {
}

func (UnimplementedRangeDiffServiceServer) CompareRanges(*RangeDiffRequest, RangeDiffService_CompareRangesServer) error {
	return status.Errorf(codes.Unimplemented, "method CompareRanges not implemented")
}
func (UnimplementedRangeDiffServiceServer) RawRangeDiff(*RangeDiffRequest, RangeDiffService_RawRangeDiffServer) error {
	return status.Errorf(codes.Unimplemented, "method RawRangeDiff not implemented")
}
func (UnimplementedRangeDiffServiceServer) mustEmbedUnimplementedRangeDiffServiceServer() {}

// UnsafeRangeDiffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RangeDiffServiceServer will
// result in compilation errors.
type UnsafeRangeDiffServiceServer interface {
	mustEmbedUnimplementedRangeDiffServiceServer()
}

func RegisterRangeDiffServiceServer(s grpc.ServiceRegistrar, srv RangeDiffServiceServer) {
	s.RegisterService(&RangeDiffService_ServiceDesc, srv)
}

func _RangeDiffService_CompareRanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RangeDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDiffServiceServer).CompareRanges(m, &rangeDiffServiceCompareRangesServer{stream})
}

type RangeDiffService_CompareRangesServer interface {
	Send(*RangeDiffResponse) error
	grpc.ServerStream
}

type rangeDiffServiceCompareRangesServer struct {
	grpc.ServerStream
}

func (x *rangeDiffServiceCompareRangesServer) Send(m *RangeDiffResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDiffService_RawRangeDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RangeDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDiffServiceServer).RawRangeDiff(m, &rangeDiffServiceRawRangeDiffServer{stream})
}

type RangeDiffService_RawRangeDiffServer interface {
	Send(*RawRangeDiffResponse) error
	grpc.ServerStream
}

type rangeDiffServiceRawRangeDiffServer struct {
	grpc.ServerStream
}

func (x *rangeDiffServiceRawRangeDiffServer) Send(m *RawRangeDiffResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RangeDiffService_ServiceDesc is the grpc.ServiceDesc for RangeDiffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RangeDiffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.RangeDiffService",
	HandlerType: (*RangeDiffServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CompareRanges",
			Handler:       _RangeDiffService_CompareRanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RawRangeDiff",
			Handler:       _RangeDiffService_RawRangeDiff_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rangediff.proto",
}
